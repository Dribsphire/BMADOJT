<?php
session_start();
if (!isset($_SESSION['user_id']) || $_SESSION['role'] !== 'teacher') {
    header("Location: ../index.php");
    exit();
}
require_once '../dbconnect.php';

// Get teacher's assigned sections
$stmt = $conn->prepare("
    SELECT DISTINCT ts.section 
    FROM teacher_sections ts
    JOIN teachers t ON ts.teacher_id = t.teacher_id
    JOIN users u ON t.user_id = u.user_id
    WHERE u.id = ?
");
$stmt->execute([$_SESSION['user_id']]);
$teacher_sections = $stmt->fetchAll(PDO::FETCH_COLUMN);

// Get teacher's user_id for message queries
$stmt = $conn->prepare("SELECT user_id FROM users WHERE id = ?");
$stmt->execute([$_SESSION['user_id']]);
$teacher_user_id = $stmt->fetchColumn();

// Get students from assigned sections with latest message info and unread counts
$placeholders = str_repeat('?,', count($teacher_sections) - 1) . '?';
$stmt = $conn->prepare("
    SELECT s.*, u.id as user_id,
           MAX(m.created_at) as last_message_time,
           COUNT(CASE WHEN m.sender_id = s.user_id AND m.receiver_id = ? AND m.is_read = 0 THEN 1 END) as unread_count
    FROM students s
    JOIN users u ON s.user_id = u.user_id
    LEFT JOIN messages m ON (m.sender_id = s.user_id AND m.receiver_id = ?) OR (m.sender_id = ? AND m.receiver_id = s.user_id)
    WHERE s.section IN ($placeholders)
    GROUP BY s.student_id, s.first_name, s.last_name, s.user_id, u.id
    ORDER BY (CASE WHEN MAX(m.created_at) IS NULL THEN 1 ELSE 0 END), MAX(m.created_at) DESC, s.last_name ASC
");
$params = array_merge([$teacher_user_id, $teacher_user_id, $teacher_user_id], $teacher_sections);
$stmt->execute($params);
$students = $stmt->fetchAll(PDO::FETCH_ASSOC);

// Get messages for the selected student (if any)
$selected_student_id = isset($_GET['student_id']) ? $_GET['student_id'] : null;
$messages = [];
if ($selected_student_id) {
    error_log("Fetching messages for teacher_id: " . $_SESSION['user_id'] . " and student_id: " . $selected_student_id);
    
    // Get student's user_id
    $stmt = $conn->prepare("SELECT user_id FROM users WHERE id = ?");
    $stmt->execute([$selected_student_id]);
    $student_user_id = $stmt->fetchColumn();
    error_log("Student's user_id: " . $student_user_id);

    // Get teacher's user_id
    $stmt = $conn->prepare("SELECT user_id FROM users WHERE id = ?");
    $stmt->execute([$_SESSION['user_id']]);
    $teacher_user_id = $stmt->fetchColumn();
    error_log("Teacher's user_id: " . $teacher_user_id);

    // Mark messages from this student as read
     $stmt = $conn->prepare("
         UPDATE messages 
         SET is_read = 1 
         WHERE sender_id = ? AND receiver_id = ? AND is_read = 0
     ");
     $stmt->execute([$student_user_id, $teacher_user_id]);

    // Fetch messages between teacher and student
    $stmt = $conn->prepare("
        SELECT m.*,
            CASE 
                WHEN m.sender_id = ? THEN 'sent'
                ELSE 'received'
            END as message_type
        FROM messages m
        WHERE (m.sender_id = ? AND m.receiver_id = ?)
           OR (m.sender_id = ? AND m.receiver_id = ?)
        ORDER BY m.created_at ASC
    ");
    $stmt->execute([
        $teacher_user_id,
        $teacher_user_id, $student_user_id,
        $student_user_id, $teacher_user_id
    ]);
    $messages = $stmt->fetchAll(PDO::FETCH_ASSOC);
    error_log("Messages found: " . print_r($messages, true));
}
?>
<!DOCTYPE html>
<html lang="en">
<head>
    <meta charset="UTF-8">
    <meta name="viewport" content="width=device-width, initial-scale=1.0">
    <title>OJTROUTE:: Messages</title>
    <link rel="stylesheet" href="../css/style.css">
    <link rel="stylesheet" href="../css/sidebarstyle.css">
    <link rel="stylesheet" href="https://cdnjs.cloudflare.com/ajax/libs/font-awesome/6.0.0/css/all.min.css">
    <script type="text/javascript" src="../js/sidebarSlide.js" defer></script>
    <style>
        body {
            background: #f5f7fa;
            color: var(--text-primary);
            margin: 0;
            padding: 0;
            min-height: 100vh;
            font-size: 14px;
        }
        .message-container {
            display: flex;
            height: calc(100vh - 155px);
            margin: 20px;
            background: white;
            border-radius: 10px;
            box-shadow: 0 2px 10px rgba(0, 0, 0, 0.1);
        }
        .student-list {
            width: 300px;
            border-right: 1px solid #eee;
            overflow-y: auto;
            padding: 15px;
        }
        .student-list h3 {
            margin: 0 0 15px 0;
            padding-bottom: 10px;
            border-bottom: 1px solid #eee;
        }
        .search-container {
            position: relative;
            margin-bottom: 15px;
        }
        .search-container input {
            width: 100%;
            padding: 10px 40px 10px 15px;
            border: 1px solid #ddd;
            border-radius: 20px;
            outline: none;
            font-size: 14px;
            box-sizing: border-box;
        }
        .search-container input:focus {
            border-color: #4CAF50;
            box-shadow: 0 0 5px rgba(76, 175, 80, 0.3);
        }
        .search-icon {
            position: absolute;
            right: 15px;
            top: 50%;
            transform: translateY(-50%);
            color: #999;
            pointer-events: none;
        }
        .student-item {
            padding: 15px;
            border-bottom: 1px solid #eee;
            cursor: pointer;
            transition: background 0.3s;
            position: relative;
            display: flex;
            justify-content: space-between;
            align-items: center;
        }
        .student-item:hover {
            background: #f5f5f5;
        }
        .student-item.active {
            background: #e3f2fd;
        }
        .student-item.has-unread {
            background: #fff3cd;
            border-left: 4px solid #ffc107;
        }
        .student-item.has-unread.active {
            background: #e3f2fd;
            border-left: 4px solid #2196F3;
        }
        .student-info {
            flex: 1;
        }
        .student-info h4 {
            margin: 0 0 5px 0;
            font-size: 16px;
            font-weight: 600;
        }
        .student-info p {
            margin: 0;
            color: #666;
            font-size: 14px;
        }
        .last-message-time {
            font-size: 12px;
            color: #999;
            margin-top: 2px;
        }
        .notification-badge {
            background: #ff4444;
            color: white;
            border-radius: 50%;
            min-width: 20px;
            height: 20px;
            display: flex;
            align-items: center;
            justify-content: center;
            font-size: 12px;
            font-weight: bold;
            margin-left: 10px;
        }
        .chat-area {
            flex: 1;
            display: flex;
            flex-direction: column;
        }
        .chat-header {
            padding: 15px 20px;
            border-bottom: 1px solid #eee;
            background: #f8f9fa;
        }
        .chat-header h3 {
            margin: 0;
        }
        .messages {
            flex: 1;
            padding: 20px;
            overflow-y: auto;
            display: flex;
            flex-direction: column;
            gap: 10px;
        }
        .message {
            display: flex;
            flex-direction: column;
            max-width: 70%;
            margin-bottom: 10px;
        }
        .message.sent {
            align-self: flex-end;
        }
        .message.received {
            align-self: flex-start;
        }
        .message-content {
            padding: 12px 16px;
            border-radius: 15px;
            position: relative;
            word-wrap: break-word;
        }
        .sent .message-content {
            background: #4CAF50;
            color: white;
            border-bottom-right-radius: 5px;
        }
        .received .message-content {
            background: #f1f1f1;
            border-bottom-left-radius: 5px;
        }
        .message-time {
            font-size: 0.75em;
            color: #666;
            margin-top: 4px;
            padding: 0 4px;
        }
        .sent .message-time {
            text-align: right;
        }
        .message-input {
            padding: 15px 20px;
            border-top: 1px solid #eee;
            display: flex;
            gap: 10px;
            background: #fff;
        }
        .message-input input {
            flex: 1;
            padding: 12px;
            border: 1px solid #ddd;
            border-radius: 20px;
            outline: none;
            font-size: 14px;
        }
        .message-input input:focus {
            border-color: #4CAF50;
        }
        .message-input button {
            padding: 12px 24px;
            background: #4CAF50;
            color: white;
            border: none;
            border-radius: 20px;
            cursor: pointer;
            font-weight: 500;
            transition: background 0.3s;
        }
        .message-input button:hover {
            background: #45a049;
        }
        .no-chat-selected {
            display: flex;
            align-items: center;
            justify-content: center;
            height: 100%;
            color: #666;
            font-size: 1.2em;
            background: #f8f9fa;
        }
        .select-student-prompt {
            text-align: center;
            display: flex;
            flex-direction: column;
            align-items: center;
        }
        .select-student-prompt i {
            margin-bottom: 15px;
        }
        .select-student-prompt p {
            margin: 0;
            font-size: 1.1em;
            color: #888;
        }
    </style>
</head>
<body>
<?php include 'teacher-sidebar.php'; ?>
    <main>
    <h2 style="background-color: #0ea539; color: white; padding: 30px; border-radius: 5px;"> Messages </h2>

        <div class="message-container">
            <div class="student-list">
                <h3>Students</h3>
                <div class="search-container">
                    <input type="text" id="student-search" placeholder="Search students..." onkeyup="filterStudents()">
                    <i class="fas fa-search search-icon"></i>
                </div>
                <?php foreach ($students as $student): ?>
                    <div class="student-item <?php echo $selected_student_id == $student['user_id'] ? 'active' : ''; ?> <?php echo $student['unread_count'] > 0 ? 'has-unread' : ''; ?>" data-student-id="<?php echo $student['user_id']; ?>"
                         onclick="selectStudent('<?php echo $student['user_id']; ?>')">
                        <div class="student-info">
                            <h4><?php echo htmlspecialchars($student['first_name'] . ' ' . $student['last_name']); ?></h4>
                            <p>Section: <?php echo htmlspecialchars($student['section']); ?></p>
                            <?php if ($student['last_message_time']): ?>
                                <div class="last-message-time">
                                    Last message: <?php echo date('M j, Y g:i A', strtotime($student['last_message_time'])); ?>
                                </div>
                            <?php endif; ?>
                        </div>
                        <?php if ($student['unread_count'] > 0): ?>
                            <div class="notification-badge">
                                <?php echo $student['unread_count']; ?>
                            </div>
                        <?php endif; ?>
                    </div>
                <?php endforeach; ?>
            </div>
            <div class="chat-area">
                <?php if ($selected_student_id): ?>
                    <div class="chat-header">
                        <h3>Chat with <?php 
                            $student = array_filter($students, function($s) use ($selected_student_id) {
                                return $s['user_id'] == $selected_student_id;
                            });
                            $student = reset($student);
                            echo htmlspecialchars($student['first_name'] . ' ' . $student['last_name']);
                        ?></h3>
                    </div>
                    <div class="messages" id="messages">
                        <?php foreach ($messages as $message): ?>
                            <div class="message <?php echo $message['message_type']; ?>">
                                <div class="message-content">
                                    <?php echo htmlspecialchars($message['message']); ?>
                                </div>
                                <div class="message-time">
                                    <?php 
                                        $date = new DateTime($message['created_at']);
                                        echo $date->format('M d, Y h:i A');
                                    ?>
                                </div>
                            </div>
                        <?php endforeach; ?>
                    </div>
                    <div class="message-input">
                        <input type="text" id="message-input" placeholder="Type your message...">
                        <button type="button" id="send-button">Send</button>
                    </div>
                <?php else: ?>
                    <div class="no-chat-selected">
                        <div class="select-student-prompt">
                            <i class="fas fa-user-plus" style="font-size: 48px; color: #ccc; margin-bottom: 15px;"></i>
                            <p>Select a student to start chatting</p>
                        </div>
                    </div>
                <?php endif; ?>
            </div>
        </div>
    </main>

    <script>
        function selectStudent(studentId) {
            window.location.href = '?student_id=' + studentId;
        }

        function filterStudents() {
            const searchInput = document.getElementById('student-search');
            const filter = searchInput.value.toLowerCase();
            const studentItems = document.querySelectorAll('.student-item');
            
            studentItems.forEach(function(item) {
                const studentName = item.querySelector('.student-info h4').textContent.toLowerCase();
                const studentSection = item.querySelector('.student-info p').textContent.toLowerCase();
                
                if (studentName.includes(filter) || studentSection.includes(filter)) {
                    item.style.display = 'flex';
                } else {
                    item.style.display = 'none';
                }
            });
        }

        function sendMessage() {
            const input = document.getElementById('message-input');
            const message = input.value.trim();
            const receiverId = '<?php echo $selected_student_id ?: ''; ?>';
            
            console.log('Attempting to send message:', {
                message: message,
                receiverId: receiverId,
                senderId: '<?php echo $_SESSION['user_id']; ?>'
            });
            
            if (!receiverId) {
                alert('Please select a student first');
                return;
            }
            
            if (message) {
                fetch('send_message.php', {
                    method: 'POST',
                    headers: {
                        'Content-Type': 'application/json',
                    },
                    body: JSON.stringify({
                        receiver_id: receiverId,
                        message: message
                    })
                })
                .then(response => {
                    console.log('Response status:', response.status);
                    return response.json();
                })
                .then(data => {
                    console.log('Response data:', data);
                    if (data.success) {
                        input.value = '';
                        location.reload();
                    } else {
                        alert('Error sending message: ' + (data.error || 'Unknown error'));
                        console.error('Error details:', data);
                    }
                })
                .catch(error => {
                    alert('Error sending message: ' + error.message);
                    console.error('Error:', error);
                });
            }
        }

        // Add click event listener to send button
        document.getElementById('send-button')?.addEventListener('click', function(e) {
            e.preventDefault();
            console.log('Send button clicked');
            sendMessage();
        });

        // Auto-scroll to bottom of messages
        const messagesDiv = document.getElementById('messages');
        if (messagesDiv) {
            messagesDiv.scrollTop = messagesDiv.scrollHeight;
        }

        // Handle Enter key
        document.getElementById('message-input')?.addEventListener('keypress', function(e) {
            if (e.key === 'Enter') {
                e.preventDefault();
                console.log('Enter key pressed');
                sendMessage();
            }
        });
    </script>
</body>
</html>